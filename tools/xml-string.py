#By zhanshi

import glob
import os
import re
import sys

def ParseDisplayName(str):
  pattern = re.compile(r'__DisplayName\s*=\s*"(.*?)"')
  splits = pattern.findall(str)
  raw_strings = []
  for s in splits:
    if len(s.strip()) != 0:
      raw_strings.append(s.strip())

  return raw_strings

def ParseTR(str, context):
  pattern = re.compile(r'QT_TRANSLATE_NOOP\("%s"\s*,\s*"(.*?)"\)' % context)
  splits = pattern.findall(str)
  raw_strings = []
  for s in splits:
    if len(s) != 0:
      raw_strings.append(s)

  return raw_strings

def ProcessOrigin(origin_file, context):
  raw_strings = []
  try:
    with open(origin_file, 'r') as origin:
      for line in origin:
        str = ParseTR(line, context)
        raw_strings += str

  except Exception as e:
    print(e)
    print('Origin file something wrong!')
    sys.exit(1);

  print(raw_strings)
  return raw_strings


'''
   Usage:
   argv[0]: xml-string
   argv[1]: scan path
   argv[2]: output file
'''
if __name__ == '__main__':
  if len(sys.argv) != 4:
    print('Usage example: xml-string.py Hypertherm translate.cpp HPR.xml')
    sys.exit(1)

  vendor = sys.argv[1]
  trans_file = sys.argv[2]
  xml_file = sys.argv[3]

  ''' Read from translate file. '''
  if (os.path.exists(trans_file) == False):
    print('Origin file cannot found!')
    sys.exit(1)

  origin = ProcessOrigin(trans_file, vendor)

  ''' Process xml file. '''
  #strings = Process()
  #non_duped = set(string)

  with open(trans_file, 'w', encoding="utf-8") as out:
    out.write('''// Copyright 2017 Fangling Software Co., Ltd. All Rights Reserved.
// Author: miaochengyu@fLcnc.com (Miaocheng Yu)

// Auto generated by xmlprm-string.py

#include <QtGlobal>

#ifdef __GNUC__
#define UNUSED __attribute__((unused))
#else
#define UNUSED
#endif

static const char *QT_TRANSLATION_STRINGS[] = {
''')
    for str in origin:
      out.write(r'  QT_TRANSLATE_NOOP("{0}", "{1}"),'.format(vendor, str))
      out.write('\n')

    #for str in non_duped:
     # if str not in origin:
      #  out.write('    <message>\n')
      #  out.write('        <source>{0}</source>\n'.format(str))
      #  out.write('        <translation type="unfinished"></translation>\n')
      #  out.write('    </message>\n')
    #  else:
      #  print("Exist: {0}".format(str))

    out.write('\n};\n')

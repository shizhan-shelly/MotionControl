#By zhanshi

import glob
import os
import re
import sys

def ParseDisplayText(str, context):
  pattern = re.compile(r'{0}="(.*?)"'.format(context))
  splits = pattern.findall(str)
  raw_strings = []
  for s in splits:
    if len(s.strip()) != 0:
      raw_strings.append(s.strip())

  return raw_strings

def ParseTR(str, context):
  pattern = re.compile(r'QT_TRANSLATE_NOOP\({0}\s*,\s*"(.*?)"\)'.format(context))
  splits = pattern.findall(str)
  raw_strings = []
  for s in splits:
    if len(s) != 0:
      raw_strings.append(s)

  return raw_strings

def ProcessOrigin(origin_file, context):
  if (not os.path.exists(origin_file)):
    with open(origin_file, 'w'):
      print('Create {0}!'.format(origin_file))

  raw_strings = []
  try:
    with open(origin_file, 'r') as origin:
      for line in origin:
        str = ParseTR(line, context)
        raw_strings += str

  except Exception as e:
    print(e)
    print('Origin file something wrong!')
    sys.exit(1)

  return raw_strings

def ParseFile(file):
  raw_strings = []
  with open(file, 'r') as xml:
    for line in xml:
      name_text = ParseDisplayText(line, 'NameText')
      display_name = ParseDisplayText(line, 'DisplayName')
      raw_strings += name_text
      raw_strings += display_name

  return raw_strings

def Process(path):
  '''
     This function will enum all the files under path and use ParseFile to process it.
  '''
  raw_strings = []
  try:
    files = glob.glob(os.path.join(path, '*{0}'.format(".xml")))
    for file in files:
      rs = ParseFile(file)
      raw_strings += rs

  except Exception as e:
    print(e)
    print('Parse xml file failed!')
    sys.exit(1)

  return raw_strings

'''
   Usage:
   argv[0]: xml-trans
   argv[1]: vendor's name
   argv[2]: destination translation file
   argv[3]: scan path
'''
if __name__ == '__main__':
  if len(sys.argv) != 4:
    print('Usage example: xml-trans.py Hypertherm translate.cpp ./')
    sys.exit(1)

  vendor = sys.argv[1]
  trans_file = sys.argv[2]
  scan_path = sys.argv[3]

  ''' Read from translate file. '''
  origin = ProcessOrigin(trans_file, vendor)

  ''' Process xml file. '''
  strings = Process(scan_path)
  non_duped = set(strings)

  with open(trans_file, 'w', encoding="utf-8") as out:
    out.write('''// Copyright 2018 Fangling Software Co., Ltd. All Rights Reserved.
// Author: shizhan-shelly@hotmail.com (Zhan Shi)

// Auto generated by xml-trans.py

#include <QtGlobal>

#ifdef __GNUC__
#define UNUSED __attribute__((unused))
#else
#define UNUSED
#endif

static const char *QT_TRANSLATION_STRINGS[] = {
''')
    for str in origin:
      out.write(r'  QT_TRANSLATE_NOOP("{0}", "{1}"),'.format(vendor, str))
      out.write('\n')

    for str in non_duped:
      if str not in origin:
        out.write(r'  QT_TRANSLATE_NOOP("{0}", "{1}"),'.format(vendor, str))
        out.write('\n')
      else:
        print("Exist: {0}".format(str))

    out.write('\n};\n')
